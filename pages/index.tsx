import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import { auth } from "../lib/firebase";
import { useRecoilState, useRecoilValue } from "recoil";
import authState, { CustomCurrentUser } from "../store/atoms/auth";
import styled from "styled-components";
import { signOut } from "@firebase/auth";
import useDispatchReports from "../hooks/useDispatchReports";
import reportState from "../store/atoms/report";

const Container = styled.div``;
const Main = styled.main``;

const Heading = styled.h1``;
const WithResolvedCheckboxContainer = styled.div``;
const WithResolvedCheckbox = styled.input``;
const WithResolvedCheckboxText = styled.p``;
const ReportList = styled.ul``;
const ReportListRow = styled.ul``;

const Footer = styled.footer``;
const LoggedInUser = styled.p``;
const LogoutLink = styled.p``;

const Home: NextPage = () => {
  const [initialized, setInitialized] = useState(false);
  const [authStateValue, setAuthState] = useRecoilState(authState);
  const reportStateValue = useRecoilValue(reportState);
  const [withResolved, setWithResolved] = useState(false);

  const router = useRouter();

  useDispatchReports(withResolved);

  useEffect(() => {
    auth.onAuthStateChanged((currentUser) => {
      if (currentUser) {
        setAuthState((prev) => ({
          ...prev,
          currentUser: currentUser.toJSON() as CustomCurrentUser,
        }));
        setInitialized(true);
      } else {
        router.push("/login");
      }
    });
  }, [router, setAuthState]);

  const handleSignOut = () => signOut(auth);

  const { reports } = reportStateValue;

  const handleWithResolvedChange = (e: React.ChangeEvent<HTMLInputElement>) =>
    setWithResolved(e.target.checked);

  if (!initialized) {
    return null;
  }

  return (
    <Container>
      <Head>
        <title>CS男</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Heading>ようおこし</Heading>
        <WithResolvedCheckboxContainer>
          <WithResolvedCheckbox
            type="checkbox"
            checked={withResolved}
            onChange={handleWithResolvedChange}
          />
          <WithResolvedCheckboxText>解決済みも含む</WithResolvedCheckboxText>
        </WithResolvedCheckboxContainer>
        <ReportList>
          {reports.map((report) => (
            <ReportListRow key={report.id}>{report.description}</ReportListRow>
          ))}
        </ReportList>
      </Main>

      <Footer>
        <LoggedInUser>
          {authStateValue.currentUser?.email}でログイン中
        </LoggedInUser>
        <LogoutLink onClick={handleSignOut}>ログアウト</LogoutLink>
      </Footer>
    </Container>
  );
};

export default Home;
