import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/router";
import { useState } from "react";
import styled from "styled-components";
import LoggedInFooter from "../../components/LoggedInFooter";
import useReport from "../../hooks/useReport";
import useRestrict from "../../hooks/useRestrict";

const Container = styled.div``;
const Main = styled.main``;

const Spinner = styled.p``;

const Heading = styled.h1``;
const ErrorText = styled.p``;
const ReportState = styled.b``;
const ChangeStateButton = styled.button``;
const CloseReasonInput = styled.input``;
const ScreenShotContainer = styled.div`
  position: relative;
  width: 100%;
  height: 320px;
`;
const Description = styled.p``;

const Report: NextPage = () => {
  const loggedIn = useRestrict();
  const router = useRouter();
  const [closeReason, setCloseReason] = useState("");

  const { id } = router.query;

  const { report, loading, closeTicket, reopenTicket } = useReport(
    id as string
  );

  const handleCloseReasonChange = (e: React.ChangeEvent<HTMLInputElement>) =>
    setCloseReason(e.target.value);

  const toggleStatus = async () => {
    if (!report) {
      return;
    }
    try {
      if (report.resolved) {
        await reopenTicket();
        console.log("reopened!");
      } else {
        if (closeReason.length) {
          await closeTicket(closeReason);
          console.log("closed!");
        }
      }
    } catch (err) {
      alert((err as { message: string }).message);
    } finally {
      setCloseReason("");
    }
  };

  if (!loggedIn) {
    return null;
  }

  if (loading) {
    return <Spinner>Loading...</Spinner>;
  }

  if (!report) {
    return (
      <Container>
        <Head>
          <title>報告が見つかりませんでした - CS男</title>
        </Head>

        <Main>
          <Link href="/">戻る</Link>
          <Heading>報告なさげ</Heading>
          <ErrorText>ID: {id} で探しました</ErrorText>
        </Main>

        <LoggedInFooter />
      </Container>
    );
  }

  return (
    <Container>
      <Head>
        <title>報告詳細 - CS男</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main>
        <Link href="/">戻る</Link>
        <Heading>報告詳細</Heading>
        <ReportState>[{report.resolved ? "解決済み" : "未解決"}]</ReportState>
        {!report.resolved ? (
          <CloseReasonInput
            type="text"
            value={closeReason}
            onChange={handleCloseReasonChange}
          />
        ) : null}
        <ChangeStateButton
          disabled={!report.resolved && !closeReason.length}
          onClick={toggleStatus}
        >
          {report.resolved ? "未解決に変更" : "解決済みに変更"}
        </ChangeStateButton>

        <ScreenShotContainer>
          <Image
            src={report.screenShotUrl || ""}
            layout="fill"
            objectFit="contain"
            alt={report.description}
          />
        </ScreenShotContainer>
        <Description>{report.description}</Description>
      </Main>

      <LoggedInFooter />
    </Container>
  );
};

export default Report;
